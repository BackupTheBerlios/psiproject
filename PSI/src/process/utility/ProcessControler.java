
package process.utility ;

import java.io.BufferedInputStream ;
import java.io.File ;
import java.io.FileInputStream ;
import java.io.FileNotFoundException ;
import java.io.IOException ;
import java.util.ArrayList ;

import javax.xml.parsers.DocumentBuilder ;
import javax.xml.parsers.DocumentBuilderFactory ;
import javax.xml.parsers.ParserConfigurationException ;

import org.w3c.dom.Document ;
import org.w3c.dom.Node ;
import org.w3c.dom.NodeList ;
import org.xml.sax.SAXException ;
import org.xml.sax.SAXParseException ;

import model.Component ;
import model.Guide ;
import model.GuideType ;
import model.Interface ;
import model.Presentation ;
import model.spem2.Activity ;
import model.spem2.BreakdownElement ;
import model.spem2.DeliveryProcess ;
import model.spem2.ProductType ;
import model.spem2.RoleDescriptor ;
import model.spem2.TaskDescriptor ;
import model.spem2.WorkProductDescriptor ;
import process.exception.FileParseException ;

/**
 * ProcessControler : Loads process information, it reads the file generated by IEPP
 * 
 * @author Condé Mickaël K.
 * @version 1.0
 * 
 */
public class ProcessControler
{
	/**
	 * Loads process data from a file
	 * 
	 * @author Condé Mickael K.
	 * @version 1.0
	 * 
	 * @param _source
	 *            the file from which read data
	 * @return
	 * @throws FileParseException
	 *             if the file format is incorrect
	 */
	public static DeliveryProcess load (File _source) throws FileParseException
	{
		try
		{
			FileInputStream localFIS = new FileInputStream(_source) ;
			BufferedInputStream localBIS = new BufferedInputStream(localFIS) ;
			DocumentBuilderFactory localDBF = DocumentBuilderFactory.newInstance() ;

			try
			{
				DocumentBuilder localDB = localDBF.newDocumentBuilder() ;
				localDB.setErrorHandler(new org.xml.sax.ErrorHandler()
				{
					/*
					 * Even if nothing is done, an exception will be thrown
					 * 
					 * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)
					 */
					public void fatalError (SAXParseException e) throws SAXException
					{
					}

					/*
					 * Making sure that SAX exception is thrown
					 * 
					 * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)
					 */
					public void error (SAXParseException e) throws SAXParseException
					{
						throw e ;
					}

					/*
					 * Warnings are not importants
					 * 
					 * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)
					 */
					public void warning (SAXParseException e) throws SAXParseException
					{

					}
				}) ;

				/*
				 * Parsing the data and checking the file format
				 */
				Document localDocument = localDB.parse(localBIS) ;
				if (!localDocument.getDocumentElement().getTagName().equalsIgnoreCase("exportExecution")) { throw new FileParseException() ; }

				/*
				 * NOTES : General process information variables and temporary variables Other
				 * variables which are more specific are declared at the begining of each parsing
				 * section
				 */
				// Main variables
				String localID = "" ;
				String localName = "" ;
				String localDescription = "" ;
				String localAuthorName = "" ;
				String localAuthorMail = "" ;
				String localDate = "" ;
				String localGenerationPath = "" ;
				String localInterfaceDiagramPath = "" ;
				String localFlowDiagramPath = "" ;
				String localActivitiesDiagramPath = "" ;
				String localResponsible = "" ;
				String localPresentationElementId = " " ;

				int localArrayCounter = 0 ;

				// Work breakdowns elements
				ArrayList <BreakdownElement> localNested = new ArrayList <BreakdownElement>() ;

				// Temporary variables for loops
				int localChildCount ;
				String localParentId ;
				NodeList localChildList ;

				/*
				 * Parsing process information
				 */
				NodeList localProcessNodeList = localDocument.getElementsByTagName("processus") ;
				int localChildMax = localProcessNodeList.getLength() ;
				if (localChildMax != 1) { throw new FileParseException() ; }

				NodeList localPAttribList = localProcessNodeList.item(0).getChildNodes() ;
				localChildMax = localPAttribList.getLength() ; // ! new meaning

				for (int i = 0; i < localChildMax; i++ )
				{
					/*
					 * Getting the ID of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("id"))
					{
						try
						{
							localID = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localID = "" ;
						}
					}

					/*
					 * Getting the name of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("nom"))
					{
						try
						{
							localName = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localName = "" ;
						}
					}

					/*
					 * Getting the description of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("description"))
					{
						try
						{
							localDescription = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localDescription = "" ;
						}
					}

					/*
					 * Getting the author's name
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("nomAuteur"))
					{
						try
						{
							localAuthorName = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localAuthorName = "" ;
						}
					}

					/*
					 * Getting the author's mail
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("emailAuteur"))
					{
						try
						{
							localAuthorMail = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localAuthorMail = "" ;
						}
					}

					/*
					 * Getting the date of export
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("dateExport"))
					{
						try
						{
							localDate = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localDate = "" ;
						}
					}

					/*
					 * Getting the generation path
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localPAttribList.item(i).getNodeName().equalsIgnoreCase("cheminGeneration"))
					{
						try
						{
							localGenerationPath = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localGenerationPath = "" ;
						}
					}
				}

				DeliveryProcess localProcess = new DeliveryProcess(localID, localName, localDescription, localAuthorName, localAuthorMail, localDate,
						localGenerationPath) ;

				
				/*
				 * Guide types [optional]
				 */
				NodeList localGuideTypesListRoot = localDocument.getElementsByTagName("liste_typeGuide") ;
				// if (localGuideTypesListRoot.getLength() != 1 ||
				// localGuideTypesListRoot.item(0).getChildNodes().getLength() == 0) {
				// System.out.println("hu") ;throw new FileParseException() ; }
				NodeList localGuideTypesList = localGuideTypesListRoot.item(0).getChildNodes() ;
				Node localGuideType ;

				localChildMax = localGuideTypesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localGuideTypesList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localGuideTypesList.item(i).getNodeName().equalsIgnoreCase("typeGuide"))
					{
						localGuideType = localGuideTypesList.item(i) ;
						localChildList = localGuideType.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

						} // End For j

						localNested.add(new GuideType(localID, localName)) ;

					} // End If
				} // End for i

				/*
				 * Guides [optional]
				 */
				// Temp variables
				Node localGuide ;
				String localGuideTypeId ;
				Guide localTempGuide ;

				NodeList localGuidesListRoot = localDocument.getElementsByTagName("liste_guide") ;
				NodeList localGuidesList = localGuidesListRoot.item(0).getChildNodes() ;

				localChildMax = localGuidesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localGuidesList.item(i).getNodeType() == Node.ELEMENT_NODE && localGuidesList.item(i).getNodeName().equalsIgnoreCase("guide"))
					{
						localGuide = localGuidesList.item(i) ;
						localChildList = localGuide.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localGuideTypeId = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The type
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("typeGuideId"))
							{
								try
								{
									localGuideTypeId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localGuideTypeId = "" ;
								}
							}

						} // End For j

						localTempGuide = new Guide(localID, localName) ;

						// Looking for guide types
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof GuideType && ((GuideType) localNested.get(j)).getId().equals(localGuideTypeId))
							{
								localTempGuide.setType((GuideType) localNested.get(j)) ;
								break ;
							}
						}

						localNested.add(localTempGuide) ;

					} // End If
				} // End for i

				/*
				 * Product types [optional]
				 */
				NodeList localProductTypesListRoot = localDocument.getElementsByTagName("liste_typeProduit") ;
				NodeList localProductTypesList = localProductTypesListRoot.item(0).getChildNodes() ;
				Node localProductType ;

				localChildMax = localProductTypesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localProductTypesList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localProductTypesList.item(i).getNodeName().equalsIgnoreCase("typeProduit"))
					{
						localProductType = localProductTypesList.item(i) ;
						localChildList = localProductType.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

						} // End For j

						localNested.add(new ProductType(localID, localName)) ;

					} // End If
				} // End for i

				/*
				 * Presentation elements
				 */
				// Temp variables
				String localIconPath ;
				String localPagePath ;
				String localContentPath ;
				Presentation localTempPresentationElement ;
				ArrayList <String> localGuidesCollection = new ArrayList <String>() ;

				NodeList localPresentationElementsListRoot = localDocument.getElementsByTagName("liste_elementPresentation") ;
				if (localPresentationElementsListRoot.getLength() != 1 || localPresentationElementsListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localPresentationElementsList = localPresentationElementsListRoot.item(0).getChildNodes() ;
				Node localPresentationElement ;
				NodeList localGuidesIdentifiers ;

				localChildMax = localPresentationElementsList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localPresentationElementsList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localPresentationElementsList.item(i).getNodeName().equalsIgnoreCase("elementPresentation"))
					{
						localPresentationElement = localPresentationElementsList.item(i) ;
						localChildList = localPresentationElement.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localID = "" ;
						localIconPath = "" ;
						localPagePath = "" ;
						localContentPath = "" ;
						localName = "" ;
						localDescription = "" ;
						localGuidesCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The description
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("description"))
							{
								try
								{
									localDescription = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localDescription = "" ;
								}
							}

							/*
							 * The icon path
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminIcone"))
							{
								try
								{
									localIconPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localIconPath = "" ;
								}
							}

							/*
							 * The content path
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminContenu"))
							{
								try
								{
									localContentPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localContentPath = "" ;
								}
							}

							/*
							 * The page path
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminPage"))
							{
								try
								{
									localPagePath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPagePath = "" ;
								}
							}

							/*
							 * Nested guides
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_guideId"))
							{
								try
								{
									localGuidesIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localGuidesIdentifiers.getLength(); k++ )
									{
										if (localGuidesIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localGuidesIdentifiers.item(k).getNodeName().equalsIgnoreCase("guideId"))
										{
											localGuidesCollection.add(localGuidesIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempPresentationElement = new Presentation(localID, localName, localDescription, localIconPath, localContentPath, localPagePath) ;

						// Linking with guides
						localArrayCounter = localGuidesCollection.size() ;
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof Guide && localGuidesCollection.contains( ((Guide) localNested.get(j)).getId()))
							{
								localTempPresentationElement.getGuides().add((Guide) localNested.get(j)) ;
								((Guide) localNested.get(j)).setPresentationElement(localTempPresentationElement) ;
								localArrayCounter-- ;
							}
							if (localArrayCounter == 0)
							{
								break ;
							}
						}

						localNested.add(localTempPresentationElement) ;

					} // End If
				} // End for i
				
				/*
				 * Tasks (TaskDescriptor)
				 */
				NodeList localTasksListRoot = localDocument.getElementsByTagName("liste_activite") ;
				if (localTasksListRoot.getLength() != 1 || localTasksListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localTasksList = localTasksListRoot.item(0).getChildNodes() ;
				Node localTask ;
				TaskDescriptor localTempTaskDescriptor ;

				localChildMax = localTasksList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localTasksList.item(i).getNodeType() == Node.ELEMENT_NODE && localTasksList.item(i).getNodeName().equalsIgnoreCase("activite"))
					{
						localTask = localTasksList.item(i) ;
						localChildList = localTask.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;
						localParentId = "" ;
						localPresentationElementId = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The parent component
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("agregatDefinitionTravail"))
							{
								try
								{
									localParentId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localParentId = "" ;
								}
							}
							
							/*
							 * The presentation element
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("elementPresentationId"))
							{
								try
								{
									localPresentationElementId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPresentationElementId = "" ;
								}
							}

						} // End For j
						
						// Setting the presentation element
						localTempTaskDescriptor = new TaskDescriptor(localID, localName, localDescription, localParentId) ;
						
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof Presentation
									&& ((Presentation) localNested.get(j)).getId().equals(localPresentationElementId))
							{
								localTempTaskDescriptor.setPresentationElement((Presentation) localNested.get(j)) ;
							}
						}

						localNested.add(localTempTaskDescriptor) ;

					} // End If
				} // End for i

				/*
				 * Work definitions (activities) using task descriptors
				 */
				// Temp variables
				NodeList localTasksIdentifiers ;
				Node localActivity ;
				ArrayList <String> localTasksCollection = new ArrayList <String>() ;
				Activity localTempActivity ;

				// Parsing
				NodeList localActivitiesListRoot = localDocument.getElementsByTagName("liste_definitionTravail") ;
				if (localActivitiesListRoot.getLength() != 1 || localActivitiesListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localActivitiesList = localActivitiesListRoot.item(0).getChildNodes() ;

				localChildMax = localActivitiesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localActivitiesList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localActivitiesList.item(i).getNodeName().equalsIgnoreCase("definitionTravail"))
					{
						localActivity = localActivitiesList.item(i) ;
						localChildList = localActivity.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;
						localParentId = "" ;
						localFlowDiagramPath = "" ;
						localActivitiesDiagramPath = "" ;
						localPresentationElementId = "" ;
						localTasksCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The parent component
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("agregatComposant"))
							{
								try
								{
									localParentId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localParentId = "" ;
								}
							}

							/*
							 * Flow diagram
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminDiagrammeFlots"))
							{
								try
								{
									localFlowDiagramPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localFlowDiagramPath = "" ;
								}
							}

							/*
							 * Activities diagram
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminDiagrammeActivites"))
							{
								try
								{
									localActivitiesDiagramPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localActivitiesDiagramPath = "" ;
								}
							}

							/*
							 * The presentation element
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("elementPresentationId"))
							{
								try
								{
									localPresentationElementId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPresentationElementId = "" ;
								}
							}

							/*
							 * Nested activities
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_activiteId"))
							{
								try
								{
									localTasksIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localTasksIdentifiers.getLength(); k++ )
									{
										if (localTasksIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localTasksIdentifiers.item(k).getNodeName().equalsIgnoreCase("activiteId"))
										{
											localTasksCollection.add(localTasksIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempActivity = new Activity(localID, localName, localDescription, localParentId, "", localFlowDiagramPath,
								localActivitiesDiagramPath) ;

						// Replacing the IDs by objects and to the presentation element
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof TaskDescriptor && localTasksCollection.contains(((TaskDescriptor) localNested.get(j)).getId()))
							{
								localTempActivity.getNestedElements().add(localNested.get(j)) ;
							}

							else if (localNested.get(j) instanceof Presentation
									&& ((Presentation) localNested.get(j)).getId().equals(localPresentationElementId))
							{
								localTempActivity.setPresentationElement((Presentation) localNested.get(j)) ;
							}
						}

						localNested.add(localTempActivity) ;

					} // End If
				} // End for i

				/*
				 * Roles (RoleDescriptor)
				 */
				// Temp variables
				RoleDescriptor localTempRole ;

				// Parsing
				NodeList localRolesListRoot = localDocument.getElementsByTagName("liste_role") ;
				if (localRolesListRoot.getLength() != 1 || localRolesListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localRolesList = localRolesListRoot.item(0).getChildNodes() ;
				Node localRole ;

				localChildMax = localRolesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localRolesList.item(i).getNodeType() == Node.ELEMENT_NODE && localRolesList.item(i).getNodeName().equalsIgnoreCase("role"))
					{
						localRole = localRolesList.item(i) ;
						localChildList = localRole.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;
						localParentId = "" ;
						localPresentationElementId = "" ;
						localTasksCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The parent component
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("agregatComposant"))
							{
								try
								{
									localParentId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localParentId = "" ;
								}
							}

							/*
							 * The presentation element
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("elementPresentationId"))
							{
								try
								{
									localPresentationElementId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPresentationElementId = "" ;
								}
							}

							/*
							 * Performed activities
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_participationActivite"))
							{
								try
								{
									localTasksIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localTasksIdentifiers.getLength(); k++ )
									{
										if (localTasksIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localTasksIdentifiers.item(k).getNodeName().equalsIgnoreCase("participationActivite"))
										{
											localTasksCollection.add(localTasksIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempRole = new RoleDescriptor(localID, localName, localDescription, localParentId) ;

						// Links between roles and activities
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof TaskDescriptor && localTasksCollection.contains( ((TaskDescriptor) localNested.get(j)).getId()))
							{
								// Adding tasks into roles
								localTempRole.getPrimaryTasks().add((TaskDescriptor) localNested.get(j)) ;
								// And then adding role link into task
								((TaskDescriptor) localNested.get(j)).getPrimaryPerformers().add(localTempRole) ;

							}
						}

						// The presentation element
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof Presentation && ((Presentation) localNested.get(j)).getId().equals(localPresentationElementId))
							{
								localTempRole.setPresentationElement((Presentation) localNested.get(j)) ;
								break ;
							}
						}

						localNested.add(localTempRole) ;

					} // End If

				} // End for i

				/*
				 * Products
				 */
				WorkProductDescriptor localTempProduct ;
				ArrayList <String> localProducingTasksCollection = new ArrayList <String>() ;
				ArrayList <String> localUsingTasksCollection = new ArrayList <String>() ;

				// Parsing
				NodeList localProductsListRoot = localDocument.getElementsByTagName("liste_produit") ;
				if (localProductsListRoot.getLength() != 1 || localProductsListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localProductsList = localProductsListRoot.item(0).getChildNodes() ;
				Node localProduct ;
				String localProductTypeId ;

				localChildMax = localProductsList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localProductsList.item(i).getNodeType() == Node.ELEMENT_NODE && localProductsList.item(i).getNodeName().equalsIgnoreCase("produit"))
					{
						localProduct = localProductsList.item(i) ;
						localChildList = localProduct.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;
						localParentId = "" ;
						localResponsible = "" ;
						localPresentationElementId = "" ;
						localProductTypeId = "" ;
						localProducingTasksCollection.clear() ;
						localUsingTasksCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The parent component
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("agregatComposant"))
							{
								try
								{
									localParentId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localParentId = "" ;
								}
							}

							/*
							 * The responsible role (only one in this implementation)
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("responsabiliteRole"))
							{
								try
								{
									localResponsible = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localResponsible = "" ;
								}
							}

							/*
							 * The presentation element
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("elementPresentationId"))
							{
								try
								{
									localPresentationElementId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPresentationElementId = "" ;
								}
							}

							/*
							 * The product type
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("typeProduitId"))
							{
								try
								{
									localProductTypeId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localProductTypeId = "" ;
								}
							}

							/*
							 * Concerned tasks
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_entreeActivite"))
							{
								try
								{
									localTasksIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localTasksIdentifiers.getLength(); k++ )
									{
										if (localTasksIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localTasksIdentifiers.item(k).getNodeName().equalsIgnoreCase("entreeActivite"))
										{
											localUsingTasksCollection.add(localTasksIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_sortieActivite"))
							{
								try
								{
									localTasksIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localTasksIdentifiers.getLength(); k++ )
									{
										if (localTasksIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localTasksIdentifiers.item(k).getNodeName().equalsIgnoreCase("sortieActivite"))
										{
											localProducingTasksCollection.add(localTasksIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempProduct = new WorkProductDescriptor(localID, localName, localDescription, localParentId) ;

						// Links between Products and tasks
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof TaskDescriptor
									&& localUsingTasksCollection.contains( ((TaskDescriptor) localNested.get(j)).getId()))
							{
								// Adding tasks into Products
								localTempProduct.getUsingTasks().add((TaskDescriptor) localNested.get(j)) ;
								// And then adding Product link into task
								((TaskDescriptor) localNested.get(j)).getInputProducts().add(localTempProduct) ;

							}
						}

						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof TaskDescriptor
									&& localProducingTasksCollection.contains( ((TaskDescriptor) localNested.get(j)).getId()))
							{
								// Adding tasks into Products
								localTempProduct.getProducingTasks().add((TaskDescriptor) localNested.get(j)) ;
								// And then adding Product link into task
								((TaskDescriptor) localNested.get(j)).getOutputProducts().add(localTempProduct) ;

							}
						}

						// The responsible
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof RoleDescriptor && localResponsible.equals( ((RoleDescriptor) localNested.get(j)).getId()))
							{
								// Setting responsibe
								localTempProduct.setResponsible((RoleDescriptor) localNested.get(j)) ;
								// And then adding Product link into task
								((RoleDescriptor) localNested.get(j)).getProducts().add(localTempProduct) ;
								break ;
							}
						}

						// The presentation element
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof Presentation && ((Presentation) localNested.get(j)).getId().equals(localPresentationElementId))
							{
								localTempProduct.setPresentationElement((Presentation) localNested.get(j)) ;
								break ;
							}
						}

						// The type
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof ProductType && ((ProductType) localNested.get(j)).getId().equals(localProductTypeId))
							{
								localTempProduct.setProductType((ProductType) localNested.get(j)) ;
								break ;
							}
						}

						localNested.add(localTempProduct) ;

					} // End If

				} // End for i

				/*
				 * Interfaces [optional]
				 */
				// Temp variables
				Interface localTempInterface ;
				ArrayList <String> localProductsCollection = new ArrayList <String>() ;

				NodeList localInterfacesListRoot = localDocument.getElementsByTagName("liste_interface") ;
				NodeList localInterfacesList = localInterfacesListRoot.item(0).getChildNodes() ;
				NodeList localProductsIdentifiers ;
				Node localInterface ;

				localChildMax = localInterfacesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localInterfacesList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localInterfacesList.item(i).getNodeName().equalsIgnoreCase("interface"))
					{
						localInterface = localInterfacesList.item(i) ;
						localChildList = localInterface.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localID = "" ;
						localProductsCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The products
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_interfaceProduit"))
							{
								try
								{
									localProductsIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localProductsIdentifiers.getLength(); k++ )
									{
										if (localProductsIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localProductsIdentifiers.item(k).getNodeName().equalsIgnoreCase("interfaceProduit"))
										{
											localProductsCollection.add(localProductsIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempInterface = new Interface(localID, "") ;
						// Linking with products, the link with components will be done in component
						// parsing
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof WorkProductDescriptor
									&& localProductsCollection.contains( ((WorkProductDescriptor) localNested.get(j)).getId()))
							{
								// Adding interface into products
								localTempInterface.getProducts().add((WorkProductDescriptor) localNested.get(j)) ;

								// And then back linking
								((WorkProductDescriptor) localNested.get(j)).getInterfaces().add(localTempInterface) ;

							}
						}

						localNested.add(localTempInterface) ;

					} // End If
				} // End for i

				/*
				 * The goddamn freaking components
				 */
				// Temp variables
				String localVersion ;
				String localGenOrder ;
				String localGivenInterface ;
				String localRequiredInterface ;
				Component localTempComponent ;
				Node localComponent ;
				NodeList localRolesIdentifiers ;
				NodeList localActivitiesIdentifiers ;
				NodeList localRespPaths ;
				// NodeList localWorkIdentifiers ;
				ArrayList <String> localResponsabilityDiagramPaths ;
				// Identifiers
				ArrayList <String> localRolesCollection = new ArrayList <String>() ;
				ArrayList <String> localActivitiesCollection = new ArrayList <String>() ;
				ArrayList <String> localRespPathsCollection = new ArrayList <String>() ;

				// Parsing
				NodeList localComponentsListRoot = localDocument.getElementsByTagName("liste_composant") ;
				if (localComponentsListRoot.getLength() != 1 || localComponentsListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localComponentsList = localComponentsListRoot.item(0).getChildNodes() ;

				localChildMax = localComponentsList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localComponentsList.item(i).getNodeType() == Node.ELEMENT_NODE
							&& localComponentsList.item(i).getNodeName().equalsIgnoreCase("composant"))
					{
						localComponent = localComponentsList.item(i) ;
						localChildList = localComponent.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;
						localVersion = "" ;
						localDate = "" ;
						localInterfaceDiagramPath = "" ;
						localFlowDiagramPath = "" ;
						localGenOrder = "" ;
						localGivenInterface = "" ;
						localRequiredInterface = "" ;
						localPresentationElementId = "" ;
						localResponsabilityDiagramPaths = null ;
						localRolesCollection.clear() ;
						localProductsCollection.clear() ;
						localActivitiesCollection.clear() ;
						localRespPathsCollection.clear() ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "" ;
								}
							}

							/*
							 * The description
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("description"))
							{
								try
								{
									localDescription = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localDescription = "" ;
								}
							}

							/*
							 * The author's name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nomAuteur"))
							{
								try
								{
									localAuthorName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localAuthorName = "" ;
								}
							}

							/*
							 * The author's mail
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("emailAuteur"))
							{
								try
								{
									localAuthorMail = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localAuthorMail = "" ;
								}
							}

							/*
							 * The given interface
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("interfaceRequise"))
							{
								try
								{
									localRequiredInterface = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localRequiredInterface = "" ;
								}
							}

							/*
							 * The required interface
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("interfaceFournie"))
							{
								try
								{
									localGivenInterface = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localGivenInterface = "" ;
								}
							}

							/*
							 * The version
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("version"))
							{
								try
								{
									localVersion = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localVersion = "" ;
								}
							}

							/*
							 * The date of publication
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("datePlacement"))
							{
								try
								{
									localDate = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localDate = "" ;
								}
							}

							/*
							 * The interfaces diagram path
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminDiagrammeInterfaces"))
							{
								try
								{
									localInterfaceDiagramPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localInterfaceDiagramPath = "" ;
								}
							}

							/*
							 * The flow diagram path
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("cheminDiagrammeFlots"))
							{
								try
								{
									localFlowDiagramPath = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localFlowDiagramPath = "" ;
								}
							}

							/*
							 * The presentation element
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("elementPresentationId"))
							{
								try
								{
									localPresentationElementId = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localPresentationElementId = "" ;
								}
							}

							/*
							 * The responsability diagrams
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_cheminDiagrammeResponsabilites"))
							{
								try
								{
									localRespPaths = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localRespPaths.getLength(); k++ )
									{
										if (localRespPaths.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localRespPaths.item(k).getNodeName().equalsIgnoreCase("cheminDiagrammeResponsabilites"))
										{
											localRespPathsCollection.add(localRespPaths.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

							/*
							 * The roles
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_roleId"))
							{
								try
								{
									localRolesIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localRolesIdentifiers.getLength(); k++ )
									{
										if (localRolesIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localRolesIdentifiers.item(k).getNodeName().equalsIgnoreCase("roleId"))
										{
											localRolesCollection.add(localRolesIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

							/*
							 * The products
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_produitId"))
							{
								try
								{
									localProductsIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localProductsIdentifiers.getLength(); k++ )
									{
										if (localProductsIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localProductsIdentifiers.item(k).getNodeName().equalsIgnoreCase("produitId"))
										{
											localProductsCollection.add(localProductsIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

							/*
							 * The work definitions
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE
									&& localChildList.item(j).getNodeName().equalsIgnoreCase("liste_definitionTravailId"))
							{
								try
								{
									localActivitiesIdentifiers = localChildList.item(j).getChildNodes() ;

									for (int k = 0; k < localActivitiesIdentifiers.getLength(); k++ )
									{
										if (localActivitiesIdentifiers.item(k).getNodeType() == Node.ELEMENT_NODE
												&& localActivitiesIdentifiers.item(k).getNodeName().equalsIgnoreCase("definitionTravailId"))
										{
											localActivitiesCollection.add(localActivitiesIdentifiers.item(k).getFirstChild().getNodeValue()) ;
										}
									}
								}
								catch (NullPointerException exc)
								{
								}
							}

						} // End For j

						localTempComponent = new Component(localID, localName, localDescription, "", localInterfaceDiagramPath, localFlowDiagramPath, "",
								localVersion, localDate, localAuthorName, localAuthorMail, localGenOrder, localResponsabilityDiagramPaths) ;

						// Replacing the IDs by objects
						for (int j = 0; j < localNested.size(); j++ )
						{
							if (localNested.get(j) instanceof RoleDescriptor)
							{
								for (int k = 0; k < localRolesCollection.size(); k++ )
								{
									if ( ((RoleDescriptor) localNested.get(j)).getParentId().equals(localID))
									{
										if (!localTempComponent.getNestedElements().contains(localNested.get(j)))
										{
											localTempComponent.getNestedElements().add(localNested.get(j)) ;
										}
									}
								}
							}

							else if (localNested.get(j) instanceof WorkProductDescriptor)
							{
								for (int k = 0; k < localProductsCollection.size(); k++ )
								{
									if ( ((WorkProductDescriptor) localNested.get(j)).getParentId().equals(localID))
									{
										if (!localTempComponent.getNestedElements().contains(localNested.get(j)))
										{
											localTempComponent.getNestedElements().add(localNested.get(j)) ;
										}
									}
								}
							}

							else if (localNested.get(j) instanceof Activity)
							{
								for (int k = 0; k < localRolesCollection.size(); k++ )
								{
									if ( ((Activity) localNested.get(j)).getDescriptor().getParentId().equals(localID))
									{
										if (!localTempComponent.getNestedElements().contains(localNested.get(j)))
										{
											localTempComponent.getNestedElements().add(localNested.get(j)) ;
										}
									}
								}
							}

							else if (localNested.get(j) instanceof Presentation
									&& ((Presentation) localNested.get(j)).getId().equals(localPresentationElementId))
							{
								localTempComponent.setPresentationElement((Presentation) localNested.get(j)) ;
							}

							else if (localNested.get(j) instanceof Interface)
							{
								if ( ((Interface) localNested.get(j)).getId().equals(localGivenInterface))
								{
									localTempComponent.setGivenInterface((Interface) localNested.get(j)) ;
									((Interface) localNested.get(j)).setGivenForComponent(localTempComponent) ;
								}
								else if ( ((Interface) localNested.get(j)).getId().equals(localRequiredInterface))
								{
									localTempComponent.setRequiredInterface((Interface) localNested.get(j)) ;
									((Interface) localNested.get(j)).setRequiredForComponent(localTempComponent) ;
								}
							}
						}

						localNested.add(localTempComponent) ;

					} // End If
				} // End for i

				localProcess.setNestedElements(localNested) ;
				return localProcess ;
			}
			catch (ParserConfigurationException eDBF)
			{
				throw new FileParseException() ;
			}
			catch (SAXException eDB)
			{
				throw new FileParseException() ;
			}
			catch (IOException eDB)
			{
				throw new FileParseException() ;
			}
		}
		catch (FileNotFoundException eIS)
		{
			throw new FileParseException() ;
		}
	}
}
