
package process.utility ;

import java.io.BufferedInputStream ;
import java.io.File ;
import java.io.FileInputStream ;
import java.io.FileNotFoundException ;
import java.io.IOException ;
import java.util.ArrayList ;

import javax.xml.parsers.DocumentBuilder ;
import javax.xml.parsers.DocumentBuilderFactory ;
import javax.xml.parsers.ParserConfigurationException ;

import org.w3c.dom.Document ;
import org.w3c.dom.Node ;
import org.w3c.dom.NodeList ;
import org.xml.sax.SAXException ;
import org.xml.sax.SAXParseException ;

import model.spem2.BreakdownElement ;
import model.spem2.DeliveryProcess ;
import model.spem2.RoleDescriptor ;
import model.spem2.TaskDescriptor ;
import process.exception.FileParseException ;

/**
 * ProcessControler : Loads process information, it reads the file generated by IEPP
 * 
 * @author Condé Mickaël K.
 * @version 1.0
 * 
 */
public class ProcessControler
{
	/**
	 * Loads process data from a file
	 * 
	 * @author Condé Mickael K.
	 * @version 1.0
	 * 
	 * @param _source
	 *            the file from which read data
	 * @return
	 * @throws FileParseException
	 *             if the file format is incorrect
	 */
	public static DeliveryProcess load (File _source) throws FileParseException
	{
		try
		{
			FileInputStream localFIS = new FileInputStream(_source) ;
			BufferedInputStream localBIS = new BufferedInputStream(localFIS) ;
			DocumentBuilderFactory localDBF = DocumentBuilderFactory.newInstance() ;

			try
			{
				DocumentBuilder localDB = localDBF.newDocumentBuilder() ;
				localDB.setErrorHandler(new org.xml.sax.ErrorHandler()
				{
					/*
					 * Even if nothing is done, an exception will be thrown
					 * 
					 * @see org.xml.sax.ErrorHandler#fatalError(org.xml.sax.SAXParseException)
					 */
					public void fatalError (SAXParseException e) throws SAXException
					{
					}

					/*
					 * Making sure that SAX exception is thrown
					 * 
					 * @see org.xml.sax.ErrorHandler#error(org.xml.sax.SAXParseException)
					 */
					public void error (SAXParseException e) throws SAXParseException
					{
						throw e ;
					}

					/*
					 * Warnings are not importants
					 * 
					 * @see org.xml.sax.ErrorHandler#warning(org.xml.sax.SAXParseException)
					 */
					public void warning (SAXParseException e) throws SAXParseException
					{

					}
				}) ;

				/*
				 * Parsing the data and checking the file format
				 */
				Document localDocument = localDB.parse(localBIS) ;
				if (!localDocument.getDocumentElement().getTagName().equalsIgnoreCase("exportExecution")) { throw new FileParseException() ; }

				/*
				 * Step 1 : General process information variables
				 */
				String localID = "" ;
				String localName = "" ;
				String localDescription = "" ;
				String localAuthorName = "" ;
				String localAuthorMail = "" ;

				NodeList localProcessNodeList = localDocument.getElementsByTagName("processus") ;
				int localChildMax = localProcessNodeList.getLength() ;
				if (localChildMax != 1) { throw new FileParseException() ; }

				NodeList localPAttribList = localProcessNodeList.item(0).getChildNodes() ;
				localChildMax = localPAttribList.getLength() ; // ! new meaning

				for (int i = 0; i < localChildMax; i++ )
				{
					/*
					 * Getting the ID of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("id"))
					{
						try
						{
							localID = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localID = "[N/A]" ;
						}
					}

					/*
					 * Getting the name of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("nom"))
					{
						try
						{
							localName = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localName = "[N/A]" ;
						}
					}

					/*
					 * Getting the description of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("description"))
					{
						try
						{
							localDescription = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localDescription = "[N/A]" ;
						}
					}

					/*
					 * Getting the author's name
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("nomAuteur"))
					{
						try
						{
							localAuthorName = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localAuthorName = "[N/A]" ;
						}
					}

					/*
					 * Getting the description of the process
					 */
					if (localPAttribList.item(i).getNodeType() == Node.ELEMENT_NODE && localPAttribList.item(i).getNodeName().equalsIgnoreCase("emailAuteur"))
					{
						try
						{
							localDescription = localPAttribList.item(i).getFirstChild().getNodeValue() ;
						}
						catch (NullPointerException exc)
						{
							localAuthorMail = "[N/A]" ;
						}
					}
				}

				DeliveryProcess localProcess = new DeliveryProcess(localID, localName, localDescription, localAuthorName, localAuthorMail) ;

				// Work breakdowns elements
				ArrayList <BreakdownElement> localNested = new ArrayList <BreakdownElement>() ;

				// Temporary variables for loops
				int localChildCount ;
				NodeList localChildList ;
				// int localLoopBreaker ;

				/*
				 * Step 2 : Roles (RoleDescriptor)
				 */
				NodeList localRolesListRoot = localDocument.getElementsByTagName("liste_role") ;
				if (localRolesListRoot.getLength() != 1 || localRolesListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localRolesList = localRolesListRoot.item(0).getChildNodes() ;
				Node localRole ;

				localChildMax = localRolesList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localRolesList.item(i).getNodeType() == Node.ELEMENT_NODE && localRolesList.item(i).getNodeName().equalsIgnoreCase("role"))
					{
						localRole = localRolesList.item(i) ;
						localChildList = localRole.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "[N/A]" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "[N/A]" ;
								}
							}

						} // End For j

						localNested.add(new RoleDescriptor(localID, localName, localDescription)) ;

					} // End If
				} // End for i

				/*
				 * Step 3 : Tasks (TaskDescriptor)
				 */
				NodeList localTasksListRoot = localDocument.getElementsByTagName("liste_activite") ;
				if (localTasksListRoot.getLength() != 1 || localTasksListRoot.item(0).getChildNodes().getLength() == 0) { throw new FileParseException() ; }
				NodeList localTasksList = localTasksListRoot.item(0).getChildNodes() ;
				Node localTask ;

				localChildMax = localTasksList.getLength() ;
				for (int i = 0; i < localChildMax; i++ )
				{
					if (localTasksList.item(i).getNodeType() == Node.ELEMENT_NODE && localTasksList.item(i).getNodeName().equalsIgnoreCase("activite"))
					{
						localTask = localTasksList.item(i) ;
						localChildList = localTask.getChildNodes() ;
						localChildCount = localChildList.getLength() ;
						localName = "" ;
						localID = "" ;
						localDescription = "" ;

						for (int j = 0; j < localChildCount; j++ )
						{
							/*
							 * The identifier
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("id"))
							{
								try
								{
									localID = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localID = "[N/A]" ;
								}
							}

							/*
							 * The name
							 */
							if (localChildList.item(j).getNodeType() == Node.ELEMENT_NODE && localChildList.item(j).getNodeName().equalsIgnoreCase("nom"))
							{
								try
								{
									localName = localChildList.item(j).getFirstChild().getNodeValue() ;
								}
								catch (NullPointerException exc)
								{
									localName = "[N/A]" ;
								}
							}
						} // End For j

						localNested.add(new TaskDescriptor(localID, localName, localDescription)) ;

					} // End If
				} // End for i

				localProcess.setNestedElements(localNested) ;
				return localProcess ;
			}
			catch (ParserConfigurationException eDBF)
			{
				throw new FileParseException() ;
			}
			catch (SAXException eDB)
			{
				throw new FileParseException() ;
			}
			catch (IOException eDB)
			{
				throw new FileParseException() ;
			}
		}
		catch (FileNotFoundException eIS)
		{
			throw new FileParseException() ;
		}
	}
}
